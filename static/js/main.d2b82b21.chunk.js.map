{"version":3,"sources":["logo.svg","actions/types.js","components/Posts.js","actions/postActions.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_POSTS","NEW_POST","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","title","body","id","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2b82b21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postActions';\n\nclass Posts extends Component {\n    componentWillMount() {\n        this.props.fetchPosts();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.newPost) {\n            this.props.posts.unshift(nextProps.newPost);\n        }\n    }\n\n    render() {\n        const postItems = this.props.posts.map(post => (\n            <div key={post.id}>\n                <h3>{post.title}</h3>\n                <p>{post.body}</p>\n            </div>\n        ));\n        return (\n            <div>\n                <h1>Posts</h1>\n                {postItems}\n            </div>\n        );\n    }\n}\n\nPosts.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    posts: PropTypes.array.isRequired,\n    newPost: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n    posts: state.posts.items,\n    newPost: state.posts.item\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);","import { FETCH_POSTS, NEW_POST } from './types';\n\nexport const fetchPosts = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json())\n        .then(posts =>\n            dispatch({\n                type: FETCH_POSTS,\n                payload: posts\n            })\n        );\n};\n\nexport const createPost = postData => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n        // try this query todosUrl: string = 'https://jsonplaceholder.typicode.com/todos?_limit=5';\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(post =>\n            dispatch({\n                type: NEW_POST,\n                payload: post\n            })\n        );\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/postActions';\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            body: ''\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        const post = {\n            title: this.state.title,\n            body: this.state.body\n        };\n\n        this.props.createPost(post);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Add Post</h1>\n                <form onSubmit={this.onSubmit}>\n                    <div>\n                        <label>Title: </label>\n                        <br />\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            onChange={this.onChange}\n                            value={this.state.title}\n                        />\n                    </div>\n                    <br />\n                    <div>\n                        <label>Body: </label>\n                        <br />\n                        <textarea\n                            name=\"body\"\n                            onChange={this.onChange}\n                            value={this.state.body}\n                        />\n                    </div>\n                    <br />\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nPostForm.propTypes = {\n    createPost: PropTypes.func.isRequired\n};\n\nexport default connect(null, { createPost })(PostForm);\n","import { FETCH_POSTS, NEW_POST } from '../actions/types';\n\nconst initialState = {\n    items: [],\n    item: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            };\n        case NEW_POST:\n            return {\n                ...state,\n                item: action.payload\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer';\n\nexport default combineReducers({\n    posts: postReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Posts from './components/Posts';\nimport PostForm from './components/Postform';\n\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Welcome to React</h1>\n          </header>\n          <PostForm />\n          <hr />\n          <Posts />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}